// Code generated by MockGen. DO NOT EDIT.
// Source: config/logging.go

// Package config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogging is a mock of Logging interface.
type MockLogging struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingMockRecorder
}

// MockLoggingMockRecorder is the mock recorder for MockLogging.
type MockLoggingMockRecorder struct {
	mock *MockLogging
}

// NewMockLogging creates a new mock instance.
func NewMockLogging(ctrl *gomock.Controller) *MockLogging {
	mock := &MockLogging{ctrl: ctrl}
	mock.recorder = &MockLoggingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogging) EXPECT() *MockLoggingMockRecorder {
	return m.recorder
}

// GetLoggerFromContext mocks base method.
func (m *MockLogging) GetLoggerFromContext(c context.Context) Logging {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerFromContext", c)
	ret0, _ := ret[0].(Logging)
	return ret0
}

// GetLoggerFromContext indicates an expected call of GetLoggerFromContext.
func (mr *MockLoggingMockRecorder) GetLoggerFromContext(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerFromContext", reflect.TypeOf((*MockLogging)(nil).GetLoggerFromContext), c)
}

// Log mocks base method.
func (m *MockLogging) Log(ctx context.Context, level LogLevel, msg string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", ctx, level, msg, fields)
}

// Log indicates an expected call of Log.
func (mr *MockLoggingMockRecorder) Log(ctx, level, msg, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogging)(nil).Log), ctx, level, msg, fields)
}

// WithTrace mocks base method.
func (m *MockLogging) WithTrace(ctx context.Context, traceID string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTrace", ctx, traceID)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithTrace indicates an expected call of WithTrace.
func (mr *MockLoggingMockRecorder) WithTrace(ctx, traceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTrace", reflect.TypeOf((*MockLogging)(nil).WithTrace), ctx, traceID)
}
